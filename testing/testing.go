package main

import (
	"bytes"
	"encoding/json"
	"fmt"
	"io/ioutil"
	"net/http"
)

// Generated by curl-to-Go: https://mholt.github.io/curl-to-go

// curl http://localhost:8080/produce \
//     --include \
//     --header "Content-Type: application/json" \
//     --request "POST" \
//     --data '[{"produce_code": "BRM8-8YT6-R09R-MTY1","name": "Watermelon","unit_price": 10.00}]'

type Payload struct {
	ProduceCode string  `json:"produce_code"`
	Name        string  `json:"name"`
	UnitPrice   float64 `json:"unit_price"`
}

func testPostProduce(data []Payload) {

	payloadBytes, err := json.Marshal(data)
	if err != nil {
		// handle err
	}
	body := bytes.NewReader(payloadBytes)

	req, err := http.NewRequest("POST", "http://localhost:8080/produce", body)
	if err != nil {
		// handle err
	}
	req.Header.Set("Content-Type", "application/json")

	resp, err := http.DefaultClient.Do(req)
	if err != nil {
		// handle err
	}

	defer resp.Body.Close()

	if resp.StatusCode == http.StatusOK {
		bodyBytes, err := ioutil.ReadAll(resp.Body)
		if err != nil {
			fmt.Print(err)
		}
		bodyString := string(bodyBytes)
		fmt.Printf(bodyString)
	}
}

func testGetProduceID(url string) {
	resp, err := http.Get(url)
	if err != nil {
		fmt.Printf("Nonexistent Produce")
	}
	defer resp.Body.Close()
}

func testGetProduce() {
	resp, err := http.Get("http://localhost:8080/produce")
	if err != nil {
		fmt.Printf("Produce doesn't exist")
	}
	defer resp.Body.Close()
}

func main() {
	//Test Uploading One Piece of Produce
	testOne := []Payload{
		{
			ProduceCode: "BRM8-8YT6-R09R-MTY1",
			Name:        "Watermelon",
			UnitPrice:   10.00,
		},
	}
	testPostProduce(testOne)

	//Test Uploading Two Pieces of Produce
	testMulti := []Payload{
		{
			ProduceCode: "BRM8-8YT6-R09R-3UYt",
			Name:        "Grapes",
			UnitPrice:   4.00,
		},
		{
			ProduceCode: "PS92-3UIT-74U3-YU92",
			Name:        "Bananas",
			UnitPrice:   5.00,
		},
	}
	testPostProduce(testMulti)

	//Test Incomplete Produce Item
	testIncomplete := []Payload{
		{
			ProduceCode: "BRM8-8YT6-R09R-JUR3",
			Name:        "Cucumbers",
		},
	}
	testPostProduce(testIncomplete)
	//Test Alphanumeric and case insensitve for Name
	testName := []Payload{
		{
			ProduceCode: "BRM8-8YT6-R09R-HUDF",
			Name:        "Waterm-lon",
			UnitPrice:   10.00,
		},
	}
	testPostProduce(testName)

	//Test 16 characters with 4 groups separated by dashes
	testCode := []Payload{
		{
			ProduceCode: "BRM8-8YT6-R09RMTY1",
			Name:        "Watermelon",
			UnitPrice:   10.00,
		},
	}
	testPostProduce(testCode)

	//Test to see if unit price has up to 2 decimal places
	testPrice := []Payload{
		{
			ProduceCode: "BRM8-8YT6-R09R-ORPE",
			Name:        "Strawberries",
			UnitPrice:   7.002323,
		},
	}
	testPostProduce(testPrice)

	//Test GET all Produce
	testGetProduce()

	//Test GET Produce by ID
	testGetProduceID("http://localhost:8080/produce/A12T-4GH7-QPL9-3N4M")

	//Test GET Nonexistent Produce
	testGetProduceID("http://localhost:8080/produce/A12T-4GH7-QPL9-3N47")
}
